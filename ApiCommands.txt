import { log } from "console";

fetch('http://34.204.34.42/api/bco/objects/create', {
      method: 'POST',
      body: JSON.stringify({
        POST_create_new_object: [
            {
                table: 'bco_draft', 
                schema: 'IEEE', 
                contents: JSON.parse('{"object_id":"https://portal.aws.biochemistry.gwu.edu/bco/BCO_099545","spec_version":"https://w3id.org/biocompute/1.4.0/","eTag":"347c9361204891c133ee22fef6d0e50191dbb89e82a7b4bfb03d29d0c76b2e44","description_domain":{"keywords":["Safety Assessment","aluminum","infant","vaccine"],"xref":[{"namespace":"pubmed","name":"PubMed","ids":["22001122"],"access_time":"2020-04-21T14:17:21-0400"}],"platform":["RStudio"],"pipeline_steps":[{"step_number":0,"name":"ODE_rates.R","description":"The matrix “dosedat” is maximum aluminum content of vaccines based on 2011 ACIP vaccination schedule. This data was reported in Table 1 (Mitkus et al. 2011). We will also be setting the PK parameters used in the rest of the program, as well as specifying the ordinary differential equations (ODEs) for the 3 compartment model (Mitkus et al 2011). For children the renal elimination constant k10 and bodyweight were modified to reflect contionous maturation. The maturation functions disscussed in Mitkus et al. 2011 was incorporated to the ODEs specified for adult model.","version":"NA","input_list":[{"uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/ODE_rates.R","access_time":"2020-04-20T09:40:17-0500"}],"output_list":[]},{"step_number":1,"name":"ODE_release2.R","description":"Due to the nonlinear nature of the compartmental pharmacokinetic model, the solutions to the ODEs specified above are computed using the “ODE” function from the package “deSolve”, and the results are stored as a list of values for each time period.","version":"NA","input_list":[{"uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/ODE_relaese2.R","access_time":"2020-04-20T09:40:17-0500"}],"output_list":[]},{"step_number":2,"name":"daily_dose.R","description":"The minimal risk values (body burdens) of aluminum for the 5th and 50th percentile of infants body weight was calculated based on the safety threshold set by the Agency for Toxic Substances and Disease Registry (ATSDR). Exposure to aluminum from breastmilk and infant formula are also estimated as detailed in Mitkus et al. 2011. Functions were written to compute the body burden of aluminum following instantaneous (100% absorption) as well as the slow absorption from intramuscular injection of vaccines.","version":"NA","input_list":[{"uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/daily_dose.R","access_time":"2020-04-20T09:40:17-0500"}],"output_list":[]},{"step_number":3,"name":"body_burden.R","description":"Combining all the values and functions that are set above, we finally generate the the values reflecting the body burden (for the 5th and 50th body weight percentile of infants).","version":"NA","input_list":[{"uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/plots.R","access_time":"2020-04-20T09:40:17-0500"}],"output_list":[]},{"step_number":4,"name":"plots.R","description":"Producing the figures.","version":"NA","input_list":[{"uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/plots.R","access_time":"2020-04-20T09:40:17-0500"}],"output_list":[{"uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/Body_burden_v_age_in_days_[Vaccines_(AlOH)].png","access_time":"2020-04-20T09:40:17-0500"},{"uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/Body_burden_v_age_in_days_[Vaccines_(AlP04)].png","access_time":"2020-04-20T09:40:17-0500"},{"uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/Body_burden_v_age_in_days_[Vaccines_(Bolus)].png","access_time":"2020-04-20T09:40:17-0500"}]},{"step_number":5,"name":"output_dataset.R","description":"Creating an “output” dataset for export and further analysis if needed. This datset is essentially the data that generated the figures.","version":"NA","input_list":[{"uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/output_datasets.R","access_time":"2020-04-20T09:40:17-0500"}],"output_list":[{"uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/outputs.csv","access_time":"2020-04-20T09:40:17-0500"}]}]},"error_domain":{"empirical_error":{},"algorithmic_error":{}},"execution_domain":{"script":[{"uri":{"uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model"}}],"script_driver":"R","software_prerequisites":[{"name":"R-3.6.3","version":"3.6.3","uri":{"uri":"https://cran.r-project.org/bin/macosx/R-3.6.3.pkg","access_time":"2020-04-20T09:40:17-0500"}},{"name":"deSolve","version":"1.28","uri":{"uri":"https://cran.r-project.org/src/contrib/deSolve_1.28.tar.gz","access_time":"2020-04-20T09:40:17-0500"}}],"external_data_endpoints":[{"name":"CRAN","url":"https://cran.r-project.org/"},{"name":"PubMed","url":"https://www.ncbi.nlm.nih.gov/pubmed"}],"environment_variables":{"HOSTTYPE":"x86_64-linux","EDITOR":"vim"}},"extension_domain":[{"extension_schema":"https://github.com/biocompute-objects/BCO_Specification/blob/1.4.0/schemas/extension_domain/fhir_extension.json","scm_extension":{"scm_repository":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines","scm_type":"git","scm_commit":"0dc930d9f897f1b581526684f3423482120fa2c7","scm_path":"biocompute-objects/Aluminum-in-infant-vaccines","scm_preview":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/master"}}],"io_domain":{"input_subdomain":[{"uri":{"filename":"ODE_rates.R","uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/ODE_rates.R","access_time":"2020-04-20T09:40:17-0500"}},{"uri":{"filename":"ODE_release2.R","uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/ODE_release2.R","access_time":"2020-04-20T09:40:17-0500"}},{"uri":{"filename":"daily_dose.R","uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/daily_dose.R","access_time":"2020-04-20T09:40:17-0500"}},{"uri":{"filename":"body_burden.R","uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/body_burden.R","access_time":"2020-04-20T09:40:17-0500"}},{"uri":{"filename":"plots.R","uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/plots.R","access_time":"2020-04-20T09:40:17-0500"}},{"uri":{"filename":"output_dataset.R","uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/output_dataset.R","access_time":"2020-04-20T09:40:17-0500"}}],"output_subdomain":[{"mediatype":"text/csv","uri":{"filename":"outputs.csv","uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/outputs.csv","access_time":"2017-01-24T09:40:17-0500"}},{"mediatype":"text/csv","uri":{"filename":"Body_burden_v_age_in_days_[Vaccines_(AlOH)].png","uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/Body_burden_v_age_in_days_[Vaccines_(AlOH)].png","access_time":"2017-01-24T09:40:17-0500"}},{"mediatype":"text/csv","uri":{"filename":"Body_burden_v_age_in_days_[Vaccines_(AlP04)].png","uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/Body_burden_v_age_in_days_[Vaccines_(AlP04)].png","access_time":"2017-01-24T09:40:17-0500"}},{"mediatype":"text/csv","uri":{"filename":"Body_burden_v_age_in_days_[Vaccines_(Bolus)].png","uri":"https://github.com/biocompute-objects/Aluminum-in-infant-vaccines/tree/1.0.0/Aluminum-Exposure-Model/Body_burden_v_age_in_days_[Vaccines_(Bolus)].png","access_time":"2017-01-24T09:40:17-0500"}}]},"provenance_domain":{"embargo":{},"name":"R Safety Assessment Algorithm for Aluminum in Infant Vaccines","version":"1.0.0","review":[{"status":"approved","reviewer_comment":"Approved by GW staff. Waiting for approval from FDA Reviewer","date":"2020-04-21T14:17:21-0400","reviewer":{"name":"Hadley King","email":"hadley_king@gwmail.gwu.edu","affiliation":"George Washington University","contribution":["createdBy"]}},{"status":"in-review","reviewer_comment":"NA","date":"2020-04-21T14:17:21-0400","reviewer":{"name":"Mark Walderhaug","affiliation":"FDA","contribution":["curatedBy"]}}],"derived_from":"NA","obsolete_after":"NA","contributors":[{"name":"Charles Hadley King","affiliation":"George Washington University","email":"hadley_king@gwu.edu","contribution":["createdBy","curatedBy"],"orcid":"https://orcid.org/0000-0003-1409-4549"},{"name":"Mark Walderhaug","affiliation":"U.S. Food and Drug Administration","email":"mark.walderhaug@fda.hhs.gov","contribution":["curatedBy","curatedBy","authoredBy"]},{"name":"RJ Mitkus","affiliation":"U.S. Food and Drug Administration","email":"rj.mitkus@fda.hhs.gov","contribution":["authoredBy"]},{"name":"RJ Mitkus","affiliation":"U.S. Food and Drug Administration","email":"rj.mitkus@fda.hhs.gov","contribution":["authoredBy"]},{"name":"DB King","affiliation":"U.S. Food and Drug Administration","email":"db.king@fda.hhs.gov","contribution":["authoredBy"]},{"name":"MA Hess","affiliation":"U.S. Food and Drug Administration","email":"ma.hess@fda.hhs.gov","contribution":["authoredBy"]}],"license":"https://creativecommons.org/licenses/by/4.0/","created":"2020-04-30T18:03:25.679Z","modified":"2020-04-30T18:03:25.679Z"},"usability_domain":["This algorithm was originally developed at the Center for Biologics Evaluation and Research to assist in safety prediction of aluminum containing infant vaccines.  A full description of the algorithm is published in the journal “vaccine” (Mitkus et al. 2011). The algorithm is capable of creating aluminum pharmacokinetic profiles for infant following recommended vaccination schedule by the Advisory Committee on Immunization Practices of the Centers for Disease Control and Prevention. Also it predicts aluminum safety threshold based on the level set by the Agency for Toxic Substances and Disease Registry."],"parametric_domain":[{"param":"seed","step":"1","value":"random"}]}'),
                state: 'DRAFT'
            }
        ]
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8"
      }
    }).then(response => {
        console.log(response.json());
      })
      



fetch('http://34.204.34.42/api/bco/objects/read', {
    method: 'POST',
    body: JSON.stringify({
        POST_read_object: [
            {
                table: 'bco_draft', 
                object_id: 'https://34.204.34.42/BCO_DRAFT_e6922748342042f8a0175b871a0e165a'
            }
        ]
    }),
    headers: {
        "Content-type": "application/json; charset=UTF-8"
    }
    }).then(response=>response.json()).then(data=>{ console.log(data.POST_read_object.contents); 
})


=============================================



fetch('http://127.0.0.1:8000/bco/objects/create', {
      method: 'POST',
      body: JSON.stringify({
        POST_create_new_object: [
            {
                table: 'bco_publish', 
                schema: 'IEEE', 
                contents: JSON.parse('{"object_id":"https://portal.aws.biochemistry.gwu.edu/bco/BCO_00069535","spec_version":"https://w3id.org/ieee/ieee-2791-schema/2791object.json","etag":"78395a1a7ad7c57f55359919f0d4d75aaaea460a8cd24c50f7d4ddb9fe655467","description_domain":{"keywords":["virus","database curation","RVDB","FDA"],"platform":["CentOS7"],"pipeline_steps":[{"input_list":[{"uri":"https://rvdb.dbi.udel.edu/download/U-RVDBv18.0.fasta.gz","filename":"U-RVDBv18.0.fasta"}],"prerequisite":[{"uri":{"uri":"https://github.com/Merck/curation-open-source/blob/master/scripts/genome2pseudoreads.py"},"name":"genome2pesudoreads.py"}],"step_number":1,"name":"genome2pseudoreads","description":"Conversion of genomes to pseudo reads","version":"1.0","output_list":[{"uri":"/tmp_files/pseudoreads.fasta","filename":"pseudoreads.fasta"}]},{"step_number":2,"name":"Kraken2","description":"Alignment tool.","version":"2.0.8","prerequisite":[{"uri":{"uri":"https://ccb.jhu.edu/software/kraken2/index.shtml?t=downloads"},"name":"Kraken2"}],"input_list":[{"uri":"/tmp_files/pseudoreads.fasta"}],"output_list":[{"uri":"/tmp_files/pseudoreads2kraken"}]},{"step_number":3,"prerequisite":[{"uri":{"uri":"https://www.ncbi.nlm.nih.gov/IEB/ToolBox/CPP_DOC/lxr/source/src/app/dustmasker/README.build"},"name":"DustMasker"}],"name":"DustMasker","description":"Mask low complexity regions of pseudoreads.","version":"1.0","input_list":[{"uri":"/tmp_files/pseudoreads2kraken"}],"output_list":[{"uri":"/tmp_files/pseudoreads_dustmasked.fasta"}]},{"step_number":4,"prerequisite":[{"uri":{"uri":"https://github.com/Merck/curation-open-source/blob/master/scripts/pseudoreads2masked.py"},"name":"pseudoreads2masked"}],"description":"Mask viral genomes in database based on pseudoreads.","name":"pseudoreads2masked","version":"1.0","output_list":[{"uri":"https://github.com/Merck/curation-open-source/blob/master/output_files/HIVE_curated.fasta"}],"input_list":[{"uri":"/tmp_files/pseudoreads_dustmasked.fasta"}]}]},"error_domain":{"empirical_error":{"input_genomes":"50","input_undefined_base_calls":"1","curated_genomes":"50","curated_undefined_base_calls":"12501"},"algorithmic_error":{"psudeoreads":"3686"}},"execution_domain":{"environment_variables":{"Minimum_memory":"200GB"},"script":[{"uri":{"uri":"https://github.com/Merck/curation-open-source/blob/master/run_curation.sh","filename":"run_curation.sh"}}],"script_driver":"shell","external_data_endpoints":[{"name":"University of Delaware RVDB repository","url":"https://rvdb.dbi.udel.edu/"}],"software_prerequisites":[{"uri":{"uri":"https://github.com/Merck/curation-open-source/blob/master/run_curation.sh"},"name":"Wrapper script","version":"1.0"},{"uri":{"uri":"https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1891-0"},"name":"Kraken2","version":"2.0.8"},{"uri":{"filename":"DustMasker","uri":"https://www.ncbi.nlm.nih.gov/books/NBK131777/"},"name":"blast+","version":"2.10.1"},{"uri":{"uri":"https://www.python.org/downloads/"},"name":"Python3","version":"3.9.0"},{"uri":{"uri":"https://github.com/Merck/curation-open-source/blob/master/scripts/pseudoreads2masked.py"},"name":"pseudoreads2masked.py","version":"1.0"},{"uri":{"uri":"https://github.com/Merck/curation-open-source/blob/master/scripts/genome2pseudoreads.py"},"version":"1.0","name":"genome2pseudoreads.py"},{"uri":{"uri":"https://github.com/Merck/curation-open-source/blob/master/scripts/RVDB2HIVE.py"},"name":"RVDB2HIVE.py","version":"1.0"}]},"extension_domain":[{"extension_schema":"https://w3id.org/biocompute/extension_domain/1.1.0/scm/scm_extension.json","scm_extension":{"scm_repository":"https://github.com/Merck/curation-open-source","scm_type":"git","scm_commit":"2bba0fbcbb58dabf17b906981638ba4132cd364b","scm_path":"Merck/curation-open-source","scm_preview":"https://github.com/Merck/curation-open-source"}},{"extension_schema":"http://www.w3id.org/biocompute/extension_domain/1.1.0/dataset/dataset_extension.json","dataset_extension":{"additional_license":{"data_license":"https://creativecommons.org/licenses/by/4.0/","script_license":"https://www.gnu.org/licenses/gpl-3.0.en.html"},"dataset_categories":[{"category_value":"Homo sapiens","category_name":"species"},{"category_value":"nucleic acid","category_name":"molecule"},{"category_value":"virus","category_name":"tag"},{"category_value":"fasta","category_name":"file_type"},{"category_value":"reviewed","category_name":"status"},{"category_value":"external","category_name":"scope"}]}}],"io_domain":{"input_subdomain":[{"uri":{"uri":"https://rvdb.dbi.udel.edu/download/U-RVDBv18.0.fasta.gz"}}],"output_subdomain":[{"uri":{"uri":"https://github.com/Merck/curation-open-source/blob/master/output_files/HIVE_curated.fasta"},"mediatype":"text/plain"}]},"parametric_domain":[{"param":"command line arg","value":"-v","step":"1"}],"provenance_domain":{"embargo":{},"name":"Merck RVDB (v18) Curation Pipeline","version":"1.0","license":"https://github.com/Merck/curation-open-source/blob/master/LICENSE.txt","contributors":[{"name":"Jonathon Keeney","affiliation":"George Washington University","contribution":["createdBy"],"email":"keeneyjg@gwu.edu","orcid":"https://orcid.org/0000-0002-7665-6204"},{"name":"Jason Victor","affiliation":"Merck and Co.","contribution":["authoredBy"]}],"created":"2020-11-10T21:35:15.014Z","modified":"2020-11-10T21:35:15.014Z"},"usability_domain":["A pipeline for curating the FDA\'s RVDB (v. 18) database of viral species. Pipeline was developed by Merck and Co., and is based on Lu and Salzberg (10.1371/journal.pcbi.1006277). Pipeline begins by i) converting viral genomes into pseudo reads, ii) alignment of pseudo reads to target database, iii) low-complexity masking, iv) masking viral genomes based on pseudo read classification, and v) addition of HIVE-specific sequence headers for integration into HIVE software. Pipeline includes a wrapper. See GitHub repository (linked in Extension Domain) for more information. The wrapper script reference (https://github.com/Merck/curation-open-source/blob/master/run_curation.sh) bundles the entire pipeline and enables execution in an HPC environment up to 200GB memory (which is required for Kraken2). This implementation was submitted using the qsub utility."]}'),
                state: 'PUBLISHED'
            }
        ]
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8"
      }
    }).then(response => {
        console.log(response.json());
    })





      // Call the API.


    fetch('http://127.0.0.1:8000/bco/objects/read', {
        method: 'POST',
        body: JSON.stringify({
            POST_read_object: [
                {
                    table: 'bco_draft', 
                    object_id: 'http://127.0.0.1/BCO_DRAFT_441c7c1e4b6e431aaa2cefdb77d6ff0e'
                },
                {
                    table: 'bco_publish',
                    object_id: 'http://127.0.0.1/BCO_1/1.3'
                }
            ]
        }),
        headers: {
            "Content-type": "application/json; charset=UTF-8"
        }
        }).then(response=>response.json()).then(data=>{ console.log(data.POST_read_object); 
    })

// Hadley's BCO
http://127.0.0.1/BCO_2/1.0

// False BCO
http://127.0.0.1/BCO_2/1.1

// Version of published BCO
http://127.0.0.1/BCO_1/1.3

// Draft BCO
http://127.0.0.1/BCO_DRAFT_441c7c1e4b6e431aaa2cefdb77d6ff0e
http://127.0.0.1/BCO_DRAFT_1332b9b3b1d041e5b8018d84c66bad43

// Published BCO
http://127.0.0.1/BCO_1/1.0
http://127.0.0.1/BCO_1/1.1
http://127.0.0.1/BCO_1/1.2
http://127.0.0.1/BCO_1/1.3
http://127.0.0.1/BCO_2/1.0


// Tests
new draft

fetch('http://127.0.0.1:8000/bco/objects/create', {
      method: 'POST',
      body: JSON.stringify({
        POST_create_new_object: [
            {
                table: 'bco_draft', 
                schema: 'IEEE', 
                contents: JSON.parse('{"test": "value"}'),
                state: 'DRAFT'
            }
        ]
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8"
      }
    }).then(response => {
        console.log(response.json());
    })


draft update

fetch('http://127.0.0.1:8000/bco/objects/create', {
      method: 'POST',
      body: JSON.stringify({
        POST_create_new_object: [
            {
                object_id: 'http://127.0.0.1/BCO_DRAFT_e5686087d9164da5afe0ba7673e78db0',
                table: 'bco_draft', 
                schema: 'IEEE', 
                contents: JSON.parse('{"test": "asdfasfdas"}'),
                state: 'DRAFT'
            }
        ]
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8"
      }
    }).then(response => {
        console.log(response.json());
    })



new publish

fetch('http://127.0.0.1:8000/bco/objects/create', {
      method: 'POST',
      body: JSON.stringify({
        POST_create_new_object: [
            {          
                table: 'bco_publish', 
                schema: 'IEEE', 
                contents: JSON.parse('{"test": "affaaaaaaaaaaaaa"}'),
                state: 'PUBLISHED'
            }
        ]
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8"
      }
    }).then(response => {
        console.log(response.json());
    })

publish with id


fetch('http://127.0.0.1:8000/bco/objects/create', {
      method: 'POST',
      body: JSON.stringify({
        POST_create_new_object: [
            {          
                object_id: 'http://127.0.0.1/BCO_3/1.0',
                table: 'bco_publish', 
                schema: 'IEEE', 
                contents: JSON.parse('{"test": "affaaaaajkh"}'),
                state: 'PUBLISHED'
            }
        ]
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8"
      }
    }).then(response => {
        console.log(response.json());
    })


# Read object.

fetch('http://127.0.0.1:8000/bco/objects/read', {
        method: 'POST',
        body: JSON.stringify({
            POST_read_object: [
                {
                    table: 'bco_draft', 
                    object_id: 'http://127.0.0.1/BCO_DRAFT_8fe107c9ee2d4a73bc40ed307261172e'
                },
                {
                    table: 'bco_publish',
                    object_id: 'http://127.0.0.1/BCO_1/1.3'
                }
            ]
        }),
        headers: {
            "Content-type": "application/json; charset=UTF-8"
        }
        }).then(response=>response.json()).then(data=>{ console.log(data.POST_read_object); 
    })






Builder Draft


fetch('http://127.0.0.1:8000/bco/objects/create', {
      method: 'POST',
      body: JSON.stringify({
        POST_create_new_object: [
            {
                table: 'bco_draft', 
                schema: 'IEEE', 
                contents: JSON.parse('{"eTag": "20cc92d37f13f09a2dd2efa3688e79be19295c478f184a58bb8415654d7dde06", "description_domain": {"keywords": ["HCV", "HCV1a", "Variant Calling", "Sample Composition"], "xref": [{"namespace": "so", "name": "Sequence Ontology", "ids": ["SO:0000002", "SO:0000694", "SO:0000667", "SO:0000045"], "access_time": "2018-13-02T10:15-05:00"}, {"namespace": "taxonomy", "name": "Taxonomy", "ids": ["31646"], "access_time": "2018-13-02T10:15-05:00"}], "platform": ["Linux"], "pipeline_steps": [{"name": "Athena-Sequencing Quality Check", "version": "6.0", "step_number": 1, "input_list": [{"uri": "../New_Run/UDS-SEQGWU4/P0641M00003_S3_L001_R2_001.fastq", "filename": "P0641M00003_S3_L001_R2_001.fastq"}, {"uri": "../New_Run/UDS-SEQGWU4/P0641M00003_S3_L001_R1_001.fastq", "filename": "P0641M00003_S3_L001_R1_001.fastq"}], "output_list": [{"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/QC_06-05-2019_10-55-00/QC_06-05-2019_10-55-00.txt", "filename": "QC_06-05-2019_10-55-00.txt"}, {"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/FASTQ/P0641M00003_S2_L001_R1_001.fastq", "filename": "P0641M00003_S2_L001_R1_001.fastq"}, {"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/FASTQ/P0641M00003_S2_L001_R2_001.fastq", "filename": "P0641M00003_S2_L001_R2_001.fastq"}], "prerequisite": [{"name": "Six set of in-silico paired end FASTQ files mimicking clinical samples infected by HCV.", "uri": {"uri": "T:/synology01/NGS_Analytics_test/New_Run/", "filename": "\'P0641M00003_S3_L001_R1_001.fastq\' to \'P0641M00236_S48_L001_R2_001.fastq\'"}}], "description": "This step of Athena  calculates different quality control values for selected set of samples. Following quality parameters are calculated: read quality, read length and total read-count. The acceptance of these parameters is determined by the user accordingly to acceptance criteria."}, {"name": "Athena-Reference Selection", "version": "6.0", "step_number": 2, "input_list": [{"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/FASTQ/P0641M00003_S3_L001_R2_001.fastq", "filename": "P0641M00003_S3_L001_R2_001.fastq"}, {"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/FASTQ/P0641M00003_S3_L001_R1_001.fastq", "filename": "P0641M00003_S3_L001_R1_001.fastq"}], "output_list": [{"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/GT_06-05-2019_12-16-53/GT_06-05-2019_12-16-53.txt", "filename": "GT_06-05-2019_12-16-53.txt"}, {"uri": "T:/synology01/NGS_Analytics_test/Software/References/Athena/Ref_fa/HCV_1a_NC004102.fa", "filename": "HCV_1a_NC004102.fa"}], "prerequisite": [{"uri": {"uri": "T:/synology01/NGS_Analytics_test/Software/References/Athena/GT_Ref/HCV.fa", "filename": "HCV.fa"}, "name": "Multi FASTA files containing HCV genotype reference sequences obtained from GenBank. These references have been curated to remove ambiguous nucleotides"}, {"name": "Six Genotyping Bowtie-2 indices files", "uri": {"uri": "T:/synology01/NGS_Analytics_test/Software/References/Athena/GT_Ref/", "filename": "\'HCV.1.bt2\' to \'HCV.rev.2.bt2\'"}}, {"name": "Species_Target text file, a text file consisting of list of annotated HCV target proteins: NS3-4A, NS5A and NS5B.", "uri": {"uri": "T:/synology01/NGS_Analytics_test/Software/References/Athena/Species_Target.txt", "filename": "Species_Target.txt"}}], "description": "Reference-selection is performed to select the best reference to be used during the first mapping step. This is needed for a proper reference-based variant calling. Reads are assigned to the different HCV reference sequences, thus enabling to calculate the number of reads that got mapped (coverage) to the selected reference sequences and to generate a sample specific reference used in the second mapping step."}, {"name": "Athena-First Mapping", "version": "6.0", "step_number": 3, "input_list": [{"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/FASTQ/P0641M00003_S3_L001_R2_001.fastq", "filename": "P0641M00003_S3_L001_R2_001.fastq"}, {"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/FASTQ/P0641M00003_S3_L001_R1_001.fastq", "filename": "P0641M00003_S3_L001_R1_001.fastq"}], "output_list": [{"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/Athena_06-05-2019_16-27-49_HCV_1a/Athena_06-05-2019_16-27-49_HCV_1a.txt", "filename": "Athena_06-05-2019_16-27-49_HCV_1a.txt"}, {"uri": "T:/dev/tmpfs", "filename": "UDS-SEQGWU4_P0641M00003_S3_1a.sam"}], "prerequisite": [{"uri": {"uri": "T:/synology01/NGS_Analytics_test/Software/References/Athena/HCV_1a_NC004102.fa", "filename": "HCV_1a_NC004102.fa"}, "name": "A FASTA file containing selected HCV1a reference sequence obtained from GenBank. The reference has been curated to remove ambiguous nucleotides."}, {"name": "Mapping Bowtie-2 indices", "uri": {"uri": "T:/synology01/NGS_Analytics_test/Software/References/Athena/BowtieIndex/", "filename": "HCV_*.bt2"}}], "description": "In the first mapping step the reads from FASTQ files are mapped to the selected reference determined from the reference selection step (Step 2) by Bowtie2 software tool. During this step following parameters are calculated: Total read coverage, coverage per nucleotide (A, T, G, C) and per position read count; and problematic regions with low coverage. Additionally, a sample specific reference is generated for each sample. This sample specific reference extracted from the first mapping step is more similar to the reads in the sample than the reference used during First Mapping step."}, {"name": "Athena-First Consensus Extraction", "version": "6.0", "step_number": 4, "input_list": [{"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/Athena_06-05-2019_16-27-49_HCV_1a/UDS-SEQGWU4_P0641M00003_S3_1a.sam", "filename": "UDS-SEQGWU4_P0641M00003_S3_1a.sam"}], "output_list": [{"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/Athena_06-05-2019_16-27-49_HCV_1a/UDS-SEQGWU4_P0641M00003_S3_1a_Consensus.fa", "filename": "UDS-SEQGWU4_P0641M00003_S3_1a_Consensus.fa"}], "prerequisite": [{"name": ".sam files from First mapping step.", "uri": {"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/Athena_06-05-2019_16-27-49_HCV_1a/UDS-SEQGWU4_P0641M00003_S3_1a.sam", "filename": "\'UDS-SEQGWU4_P0641M00003_S3_1a.sam"}}], "description": "The first consensus sequence is more similar to the reads in the sample than the reference used during the First mapping (Step 3). Insertions and deletions are not incorporated in this first consensus sequence, otherwise the annotation changes and insertions and deletions cannot be detected in Variant calling on the second mapping"}, {"name": "Athena-Second Mapping ", "version": "6.0", "step_number": 5, "input_list": [{"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/FASTQ/P0641M00003_S3_L001_R2_001.fastq", "filename": "P0641M00003_S3_L001_R2_001.fastq"}, {"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/FASTQ/P0641M00003_S3_L001_R1_001.fastq", "filename": "P0641M00003_S3_L001_R1_001.fastq"}], "output_list": [{"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/Athena_06-05-2019_16-27-49_HCV_1a/Athena_06-05-2019_16-27-49_HCV_1a.txt", "filename": "Athena_06-05-2019_16-27-49_HCV_1a.txt"}, {"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/Athena_06-05-2019_16-27-49_HCV_1a/UDS-SEQGWU4_P0641M00003_S3_1a.sam", "filename": "UDS-SEQGWU9_P0641M00003_S2_1a.sam"}], "prerequisite": [{"uri": {"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/Athena_06-05-2019_16-27-49_HCV_1a/UDS-SEQGWU4_P0641M00003_S3_1a_Consensus.fa", "filename": "UDS-SEQGWU4_P0641M00003_S3_1a_Consensus.fa"}, "name": "Sample specific Reference Sequences obtained from first consensus extraction after first mapping step and they are used as a mapping template in the second mapping step."}, {"name": "Sample Mapping Bowtie-2 indices", "uri": {"uri": "../tmpfs", "filename": "UDS-SEQGWU4_P0641M00003_S3_1a_*.bt2"}}], "description": "In order to increase the accuracy of the mapping and obtain maximum insight, the reads from sample will be remapped during the Second Mapping to the extracted First Consensus Sequence from Step 4. Also the coverage is calculated where three results that are measured: 1. Total read coverage, 2. Per nucleotide (A, T, G, C) per position read count and 3. Problematic regions with low coverage. Coverage graphs are created in order to assess sufficient coverage across the ROI (region of interest). "}, {"name": "Athena-Sample Composition: Single amino acid variant calling", "version": "6.0", "step_number": 6, "input_list": [{"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/Athena_06-05-2019_16-27-49_HCV_1a/UDS-SEQGWU4_P0641M00003_S3_1a.sam", "filename": "UDS-SEQGWU4_P0641M00003_S3_1a.sam"}], "output_list": [{"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/Athena_06-05-2019_16-27-49_HCV_1a/Athena_06-05-2019_16-27-49_HCV_1a.txt", "filename": "Athena_06-05-2019_16-27-49_HCV_1a.txt"}], "prerequisite": [{"uri": {"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/Athena_06-05-2019_16-27-49_HCV_1a/UDS-SEQGWU4_P0641M00003_S3_1a.sam", "filename": "UDS-SEQGWU4_P0641M00003_S3_1a.sam"}, "name": ".sam file from second mapping step."}, {"uri": {"uri": "../NGS_Analytics_test/Software/References/Athena/References.txt", "filename": "References.txt"}, "name": "References text file, a text file consisting of list of start/end positions of the different HCV genes/proteins: NS3-4A, NS5A and NS5B."}, {"name": "HCV Genotype 1a fasta file", "uri": {"uri": "../NGS_Analytics_test/Software/References/Athena/Ref_fa/HCV_1a_NC004102.fa", "filename": "HCV_1a_NC004102.fa"}}], "description": " Substitutions are detected in Step 5 Second Mapping, where the reads are compared to the selected reference sequence. Variants are detected on the translated amino acid level."}]}, "error_domain": {"empirical_error": {"D168Y_week9": {"percentage": "0.56", "reads_generated": "90029", "coverage": "2799.98963", "AthenaREADCOUNT": "2853", "AthenaCOVERAGE": "5081", "AthenaPERCENTAGE": "0.5615", "AthenaQUALITY": "33.95", "AthenaFCOUNT": "1444", "AthenaRCOUNT": "1409", "AthenaFRSCORE": "0.0186", "STDEV.P": "0.00075"}, "D168A_week9": {"percentage": "0.22", "reads_generated": "35369", "coverage": "1100.01037", "AthenaREADCOUNT": "1050", "AthenaCOVERAGE": "5081", "AthenaPERCENTAGE": "0.20665", "AthenaQUALITY": "33.67", "AthenaFCOUNT": "534", "AthenaRCOUNT": "516", "AthenaFRSCORE": "0.0284", "STDEV.P": "0.006675"}, "M28T_week9": {"percentage": "0.71", "reads_generated": "114144", "coverage": "3549.98963", "AthenaREADCOUNT": "3652", "AthenaCOVERAGE": "5158", "AthenaPERCENTAGE": "0.70803", "AthenaQUALITY": "33.84", "AthenaFCOUNT": "1794", "AthenaRCOUNT": "1858", "AthenaFRSCORE": "0.004", "STDEV.P": "0.000985"}, "M28S_week9": {"percentage": "0.03", "reads_generated": "4823", "coverage": "150", "AthenaREADCOUNT": "149", "AthenaCOVERAGE": "5158", "AthenaPERCENTAGE": "0.02889", "AthenaQUALITY": "33.21", "AthenaFCOUNT": "73", "AthenaRCOUNT": "76", "AthenaFRSCORE": "0.0093", "STDEV.P": "0.000555"}, "Q30R_week9": {"percentage": "0.18", "reads_generated": "28938", "coverage": "900", "AthenaREADCOUNT": "934", "AthenaCOVERAGE": "5111", "AthenaPERCENTAGE": "0.18274", "AthenaQUALITY": "33.45", "AthenaFCOUNT": "449", "AthenaRCOUNT": "485", "AthenaFRSCORE": "0.0415", "STDEV.P": "0.00137"}, "C316N_week9": {"percentage": "0.06", "reads_generated": "9646", "coverage": "300", "AthenaREADCOUNT": "297", "AthenaCOVERAGE": "5002", "AthenaPERCENTAGE": "0.05938", "AthenaQUALITY": "33.69", "AthenaFCOUNT": "150", "AthenaRCOUNT": "147", "AthenaFRSCORE": "0.0466", "STDEV.P": "0.00031"}, "M414T_week9": {"percentage": "0.44", "reads_generated": "70737", "coverage": "2199.98963", "AthenaREADCOUNT": "2215", "AthenaCOVERAGE": "5059", "AthenaPERCENTAGE": "0.43783", "AthenaQUALITY": "33.97", "AthenaFCOUNT": "1103", "AthenaRCOUNT": "1112", "AthenaFRSCORE": "0.0583", "STDEV.P": "0.001085"}, "S556G_week9": {"percentage": "0.03", "reads_generated": "4823", "coverage": "150", "AthenaREADCOUNT": "127", "AthenaCOVERAGE": "4738", "AthenaPERCENTAGE": "0.0268", "AthenaQUALITY": "32.34", "AthenaFCOUNT": "51", "AthenaRCOUNT": "76", "AthenaFRSCORE": "0.228", "STDEV.P": "0.0016"}, "definitions": {"percentage": "desired percentage of mutation", "reads_generated": "number of in-silico reads needed to obtain the desired coverage and percentage for experiment", "coverage": "The coverage provided for the genome based on the number of reads generated for the experiment (number of reads generated * read length / genome length)", "AthenaREADCOUNT": "number of reads identified with mutation", "AthenaCOVERAGE": "coverage at location", "AthenaPERCENTAGE": "percentage of identified mutation", "AthenaQUALITY": "average quality score for location", "AthenaFCOUNT": "forward count for these reads", "AthenaRCOUNT": "reverse count for these reads", "AthenaFRSCORE": "F score is a measure of the forward vs revers count for a location. Values < 0.5 are desirable", "STDEV.P": "value of STDEV.P for percentage and AthenaPERCENTAGE"}}, "algorithmic_error": {"AthenaFRSCORE_threshold": 0.5, "AthenaQUALITY": 25, "AthenaCOVERAGE": 5000}}, "io_domain": {"input_subdomain": [{"uri": {"uri": "T:/synology01/NGS_Analytics_test/Software/References/Athena/Species_Target.txt", "filename": "Species_Target.txt"}}, {"uri": {"uri": "T:/synology01/NGS_Analytics_test/Software/References/Athena/References.txt", "filename": "References.txt"}}, {"uri": {"uri": "T:/synology01/NGS_Analytics_test/Software/References/Athena/GT_Ref/", "filename": "HCV.1.bt2 to HCV.rev.2.bt2"}}, {"uri": {"uri": "T:/synology01/NGS_Analytics_test/Software/References/Athena/GT_Ref/HCV.fa", "filename": "HCV.fa"}}, {"uri": {"uri": "T:/synology01/NGS_Analytics_test/Software/References/Athena/Ref_fa/", "filename": "HCV_*.fa"}}, {"uri": {"uri": "T:/synology01/NGS_Analytics_test/Software/References/Athena/BowtieIndex/", "filename": "HCV_*.bt2"}}, {"uri": {"uri": "../New_Run/UDS-SEQGWU4/P0641M00003_S3_L001_R2_001.fastq", "filename": "P0641M00003_S3_L001_R2_001.fastq"}}, {"uri": {"uri": "../New_Run/UDS-SEQGWU4/P0641M00003_S3_L001_R1_001.fastq", "filename": "P0641M00003_S3_L001_R1_001.fastq"}}], "output_subdomain": [{"uri": {"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/QC_06-05-2019_10-55-00/QC_06-05-2019_10-55-00.txt", "filename": "QC_06-05-2019_10-55-00.txt"}, "mediatype": ".txt"}, {"uri": {"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/GT_06-05-2019_12-16-53/GT_06-05-2019_12-16-53.txt", "filename": "GT_06-05-2019_12-16-53.txt"}, "mediatype": ".txt"}, {"uri": {"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/Athena_06-05-2019_16-27-49_HCV_1a/Athena_06-05-2019_16-27-49_HCV_1a.txt", "filename": "Athena_06-05-2019_16-27-49_HCV_1a.txt"}, "mediatype": ".txt"}, {"uri": {"uri": "../NGS_Data/P0641/P0641M00003/UDS-SEQGWU4/Athena_06-05-2019_16-27-49_HCV_1a/UDS-SEQGWU4_P0641M00003_S3_1a.sam", "filename": "UDS-SEQGWU4_P0641M00003_S3_1a.sam"}, "mediatype": ".sam"}]}, "parametric_domain": [{"step": "2", "param": "GT_Percentage", "value": "0.1"}, {"step": "6", "param": "Minimal_Coverage", "value": "5000"}, {"step": "6", "param": "Minimal_Coverage_filter", "value": "500"}, {"step": "6", "param": "Quality_threshold", "value": "20"}, {"step": "6", "param": "Average_quality_of_a_read", "value": "20"}, {"step": "6", "param": "Length_theshold", "value": "50"}], "usability_domain": ["Identify treatment emergent amino acid substitutions[so:0000048] that correlate with antiviral drug treatment failure", "This biocompute object is the BCO proof of concept for FDA data submission process. BCO is intended to facilitate data analysis and communication during FDA data submission. We have generated mock HCV patient data to mimic a real clinical trial FDA submission and confirm if BCO facilitates the submission process. BCO elucidates potential dicordant results between prirmary data analyis and FDA data re-analysis", "Clinical trial description can be found at: URI: https://clinicaltrials.gov/"]}'),
                state: 'DRAFT'
            }
        ]
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8"
      }
    }).then(response => {
        console.log(response.json());
    })

http://127.0.0.1/BCO_DRAFT_8fe107c9ee2d4a73bc40ed307261172e
